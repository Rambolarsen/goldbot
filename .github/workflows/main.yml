# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        # Adds credentials
      - 
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - 
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1        
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: fromasjen/goldbot:latest
          
      # Deploys a docker container to a azure container instance
      - 
        name: Deploy to Azure Container Instances
        uses: Azure/aci-deploy@v1
        with:
          # Name of the Resource Group in which the Container Instance will be created
          resource-group: gold-bot-rg
          # The command line to run when the container is started, e.g. "/bin/bash -c myscript.sh"
          #command-line: # optional, default is 

          # List of environment variables for the container. Space-seperated in "key=value" format
          environment-variables: 'DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}'
          # The DNS Name Label for Container with Public IP
          dns-name-label: 'goldbot'
          # Specify the fully qualified container image name. For example, "myregistry.azurecr.io/nginx:latest" or "python:3.7.2-alpine/"
          image: 'fromasjen/goldbot'
          # Location where the Container will be deployed
          location: 'West Europe'

          # Name of the Container Group Instance
          name: gold-bot-ci
          # The OS type of the Containers. Accepted Values are  { Linux, Windows }                  

